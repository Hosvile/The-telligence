
local players = game:GetService("Players")

local lplayer = players.LocalPlayer

local teams = game:GetService("Teams")

local COREGUI = game:GetService("CoreGui")

local lhead = lplayer.Character:FindFirstChild("Head")

local lhum = lplayer.Character:FindFirstChildWhichIsA("Humanoid")

local lhump = lplayer.Character:FindFirstChild("HumanoidRootPart")

local rservice = game:GetService("RunService")

local wspace = game:GetService("Workspace")

local workgrag = workspace.Gravity

local Ccam = workspace.CurrentCamera

local Sectors = loadstring(game:HttpGet("https://raw.githubusercontent.com/Hosvile/The-telligence/main/MCButton002"))()

local Sect = Sectors:CreateButton()

local Cbool = true

local Service = game:GetService("RunService")

local hb = Service.Heartbeat

Players = game:GetService("Players")

local speaker = Players.LocalPlayer

function getRoot(char)
	local rootPart = char:FindFirstChild('HumanoidRootPart') or char:FindFirstChild('Torso') or char:FindFirstChild('UpperTorso')
	return rootPart
end

IYMouse = Players.LocalPlayer:GetMouse()
UserInputService = game:GetService("UserInputService")

for i, v in pairs(game:GetDescendants()) do
if v.Name == "Kyia_" then
v:Destroy()
end
end

local Model = Instance.new("Model")
Model.Name == "Kyia_"
Model.Parent = wspace

local Camera = Instance.new("Part")
Camera.Transparency = 0.75
Camera.Size = Vector3.new(1,1,1)
Camera.Parent = Model
Camera.CFrame = Ccam.CFrame
Camera.Anchored = true
Camera.Shape = "Ball"
Camera.TopSurface = "SmoothNoOutlines"
Camera.CanCollide = false

Ccam.CameraSubject = lplayer.Character:FindFirstChild("Head")

function sFLY(vfly)
	repeat wait() until Players.LocalPlayer and Players.LocalPlayer.Character and getRoot(Players.LocalPlayer.Character) and Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
	repeat wait() until IYMouse
	if flyKeyDown or flyKeyUp then flyKeyDown:Disconnect() flyKeyUp:Disconnect() end

	local T = getRoot(Players.LocalPlayer.Character)
	local CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
	local lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
	local SPEED = 0

	local function FLY()
		FLYING = true
		local BG = Instance.new('BodyGyro')
		local BV = Instance.new('BodyVelocity')
		BG.P = 9e4
		BG.Parent = T
		BV.Parent = T
		BG.maxTorque = Vector3.new(9e9, 9e9, 9e9)
		BG.cframe = T.CFrame
		BV.velocity = Vector3.new(0, 0, 0)
		BV.maxForce = Vector3.new(9e9, 9e9, 9e9)
		task.spawn(function()
			repeat wait()
				if not vfly and Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
					Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = true
				end
				if CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0 then
					SPEED = 50
				elseif not (CONTROL.L + CONTROL.R ~= 0 or CONTROL.F + CONTROL.B ~= 0 or CONTROL.Q + CONTROL.E ~= 0) and SPEED ~= 0 then
					SPEED = 0
				end
				if (CONTROL.L + CONTROL.R) ~= 0 or (CONTROL.F + CONTROL.B) ~= 0 or (CONTROL.Q + CONTROL.E) ~= 0 then
					BV.velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (CONTROL.F + CONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(CONTROL.L + CONTROL.R, (CONTROL.F + CONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
					lCONTROL = {F = CONTROL.F, B = CONTROL.B, L = CONTROL.L, R = CONTROL.R}
				elseif (CONTROL.L + CONTROL.R) == 0 and (CONTROL.F + CONTROL.B) == 0 and (CONTROL.Q + CONTROL.E) == 0 and SPEED ~= 0 then
					BV.velocity = ((workspace.CurrentCamera.CoordinateFrame.lookVector * (lCONTROL.F + lCONTROL.B)) + ((workspace.CurrentCamera.CoordinateFrame * CFrame.new(lCONTROL.L + lCONTROL.R, (lCONTROL.F + lCONTROL.B + CONTROL.Q + CONTROL.E) * 0.2, 0).p) - workspace.CurrentCamera.CoordinateFrame.p)) * SPEED
				else
					BV.velocity = Vector3.new(0, 0, 0)
				end
				BG.cframe = workspace.CurrentCamera.CoordinateFrame
			until not FLYING
			CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
			lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
			SPEED = 0
			BG:Destroy()
			BV:Destroy()
			if Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
				Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
			end
		end)
	end
	flyKeyDown = IYMouse.KeyDown:Connect(function(KEY)
		if KEY:lower() == 'w' then
			CONTROL.F = (vfly and vehicleflyspeed or iyflyspeed)
		elseif KEY:lower() == 's' then
			CONTROL.B = - (vfly and vehicleflyspeed or iyflyspeed)
		elseif KEY:lower() == 'a' then
			CONTROL.L = - (vfly and vehicleflyspeed or iyflyspeed)
		elseif KEY:lower() == 'd' then 
			CONTROL.R = (vfly and vehicleflyspeed or iyflyspeed)
		elseif QEfly and KEY:lower() == 'e' then
			CONTROL.Q = (vfly and vehicleflyspeed or iyflyspeed)*2
		elseif QEfly and KEY:lower() == 'q' then
			CONTROL.E = -(vfly and vehicleflyspeed or iyflyspeed)*2
		end
		pcall(function() workspace.CurrentCamera.CameraType = Enum.CameraType.Track end)
	end)
	flyKeyUp = IYMouse.KeyUp:Connect(function(KEY)
		if KEY:lower() == 'w' then
			CONTROL.F = 0
		elseif KEY:lower() == 's' then
			CONTROL.B = 0
		elseif KEY:lower() == 'a' then
			CONTROL.L = 0
		elseif KEY:lower() == 'd' then
			CONTROL.R = 0
		elseif KEY:lower() == 'e' then
			CONTROL.Q = 0
		elseif KEY:lower() == 'q' then
			CONTROL.E = 0
		end
	end)
	FLY()
end

function NOFLY()
	FLYING = false
	if flyKeyDown or flyKeyUp then flyKeyDown:Disconnect() flyKeyUp:Disconnect() end
	if Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid') then
		Players.LocalPlayer.Character:FindFirstChildOfClass('Humanoid').PlatformStand = false
	end
	pcall(function() workspace.CurrentCamera.CameraType = Enum.CameraType.Custom end)
end


function Swim()
workspace.Gravity = workgrag --on
	local function swimDied()
		workspace.Gravity = workgrag
		swimming = false
	end
	local Humanoid = lplayer.Character:FindFirstChildWhichIsA("Humanoid")
	gravReset = Humanoid.Died:Connect(swimDied)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing,false)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown,false)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying,false)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall,false)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp,false)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping,false)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed,false)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics,false)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding,false)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll,false)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.Running,false)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics,false)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated,false)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics,false)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming,false)
	Humanoid:ChangeState(Enum.HumanoidStateType.Swimming)
	swimming = true
end

function NoSwim()
workspace.Gravity = workgrag --off
	swimming = false
	if gravReset then
		gravReset:Disconnect()
	end
	local Humanoid = lplayer.Character:FindFirstChildWhichIsA("Humanoid")
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing,true)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown,true)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying,true)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall,true)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp,true)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping,true)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed,true)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics,true)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding,true)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll,true)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.Running,true)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics,true)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated,true)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics,true)
	Humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming,true)
	Humanoid:ChangeState(Enum.HumanoidStateType.RunningNoPhysics)
end

rservice.RenderStepped:connect(function()
    while not lhump and not lhum do wait() end
if lhum.MoveDirection.Magnitude > 0 and lhump.Anchored == true and Cbool == true then
                movedirection = Model:TranslateBy(lhum.MoveDirection*1.5)
		end
end)

NoSwim()
NOFLY()

Sect:Toggled("Free-Cam",function(t)
    while not lhump and not lhum do wait() end
    if t then
    Swim()
    sFLY()
    Cbool = true
    lhump.Anchored = true
    Ccam.CameraSubject = Camera
    Camera.Anchored = true
    else
    NOFLY()
    NoSwim()
    Cbool = false
    Ccam.CameraSubject = lplayer.Character:FindFirstChild("Head")
    lhump.Anchored = false
    Camera.Anchored = true
    end
    end)
